/// Flexie grid system
/// @author: Azin Asili
/// @link https://github.com/azinasili/flexie

/// Set flex display property
///
/// @param {String} $flexie-display ['flex'] - set flex display property
///
/// @example scss
///   @include flexie-display();
///   @include flexie-display(flex);
///   @include flexie-display(inline-flex);
@mixin flexie-display($flexie-display: flex) {
  display: flexie-display($flexie-display);
}

/// Set direction of flex items
///
/// @param {String} $flexie-direction ['row'] - set flex direction property
///
/// @example scss
///   @include flexie-direction();
///   @include flexie-direction(row);
///   @include flexie-direction(row-reverse);
///   @include flexie-direction(column);
///   @include flexie-direction(column-reverse);
@mixin flexie-direction($flexie-direction: row) {
  flex-direction: flexie-direction($flexie-direction);
}

/// Set row or column gutter width
///
/// @param {Number} $flexie-gutter [map-get($flexie, gutter)] - get gutter width from settings
/// @param {String} $row-or-col ['col'] - determine how to calculate gutter width
///
/// @example scss
///   @include flexie-gutter();
///   @include flexie-gutter(30px);
///   @include flexie-gutter(30px, col);
///   @include flexie-gutter(30px, row);
@mixin flexie-gutter($flexie-gutter: map-get($flexie, gutter), $row-or-col: col) {
  @if $row-or-col == 'col' {
    padding-left: flexie-gutter($flexie-gutter, $row-or-col: col);
    padding-right: flexie-gutter($flexie-gutter, $row-or-col: col);
  } @else if $row-or-col == 'row' {
    margin-left: flexie-gutter($flexie-gutter, $row-or-col: row);
    margin-right: flexie-gutter($flexie-gutter, $row-or-col: row);
  }
}

/// Set flex items re-flow
///
/// @param {String} $flexie-row-wrap ['wrap'] - set flex items re-flow behavior
///
/// @example scss
///   @include flexie-row-wrap();
///   @include flexie-row-wrap(wrap);
///   @include flexie-row-wrap(wrap-reverse);
///   @include flexie-row-wrap(nowrap);
@mixin flexie-row-wrap($flexie-row-wrap: wrap) {
  flex-wrap: flexie-row-wrap($flexie-row-wrap);
}

/// Set flex items horizontal distribution
///
/// @param {String} $flexie-row-justify ['flex-start'] - set flex items horizontal distribution behavior
///
/// @example scss
///   @include flexie-row-justify();
///   @include flexie-row-justify(flex-start);
///   @include flexie-row-justify(flex-end);
///   @include flexie-row-justify(center);
///   @include flexie-row-justify(space-around);
///   @include flexie-row-justify(space-between);
///   @include flexie-row-justify(around);
///   @include flexie-row-justify(between);
///   @include flexie-row-justify(left);
///   @include flexie-row-justify(right);
@mixin flexie-row-justify($flexie-row-justify: flex-start) {
  justify-content: flexie-row-justify($flexie-row-justify);
}

/// Set flex items vertical distribution
///
/// @param {String} $flexie-row-align ['flex-start'] - set flex items vertical distribution behavior
///
/// @example scss
///   @include flexie-row-align();
///   @include flexie-row-align(flex-start);
///   @include flexie-row-align(flex-end);
///   @include flexie-row-align(center);
///   @include flexie-row-align(stretch);
///   @include flexie-row-align(baseline);
///   @include flexie-row-align(bottom);
///   @include flexie-row-align(middle);
///   @include flexie-row-align(top);
@mixin flexie-row-align($flexie-row-align: flex-start) {
  align-items: flexie-row-align($flexie-row-align);
}

/// Create column width
///
/// @param {String | Number} $flexie-col-width ['auto'] - create auto width column
///
/// @example scss
///   @include flexie-col-width();
///   @include flexie-col-width(auto);
///   @include flexie-col-width(3/5);
@mixin flexie-col-width($flexie-col-width: auto) {
  @if $flexie-col-width != auto {
    flex-basis: percentage($flexie-col-width);
    flex-grow: 0;
    max-width: percentage($flexie-col-width);
  } @else {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
    min-width: 0;
  }
}

/// Set individual column alignment
///
/// @param {String} $flexie-col-align ['flex-start'] - set individual column alignment
///
/// @example scss
///   @include flexie-col-align();
///   @include flexie-col-align(flex-start);
///   @include flexie-col-align(flex-end);
///   @include flexie-col-align(center);
///   @include flexie-col-align(stretch);
///   @include flexie-col-align(baseline);
///   @include flexie-col-align(bottom);
///   @include flexie-col-align(middle);
///   @include flexie-col-align(top);
@mixin flexie-col-align($flexie-col-align: flex-start) {
  align-self: flexie-col-align($flexie-col-align);
}

/// Set flex-item source order
///
/// @param {String} $flexie-col-order - integer greater than 0
///
/// @example scss
///   @include flexie-col-align();
@mixin flexie-col-order($flexie-col-order) {
  order: flexie-col-order($flexie-col-order);
}

/// Create container element context
///
/// @param {Number} $width [map-get($flexie, container-width)] - set a max-width on container element
/// @param {Number} $gutter [map-get($flexie, gutter)] - set grid gutter width to container element
///
/// @example scss
///   @include flexie-container();
///   @include flexie-container(1500px);
///   @include flexie-container(1500px, 40px);
///   @include flexie-container($gutter: 40px);
@mixin flexie-container($width: map-get($flexie, container-width), $gutter: map-get($flexie, gutter)) {
  @if $width != 100% {
    margin-left: auto;
    margin-right: auto;
    max-width: $width;
  }
  @include flexie-gutter($gutter, col);
  width: 100%;
}

/// Create row element context
///
/// @param {String} $display ['flex'] - set flex display property
/// @param {String} $direction ['row'] - set flex direction property
/// @param {String} $wrap ['wrap'] - set flex items re-flow behavior
/// @param {Number} $gutter [map-get($flexie, gutter)] - set row gutter width
/// @param {String} $justify - set flex items horizontal distribution behavior
/// @param {String} $align - set flex items vertical distribution behavior
///
/// @example scss
///   @include flexie-row();
///   @include flexie-row($direction: column);
///   @include flexie-row($wrap: wrap-reverse, $justify: around);
@mixin flexie-row($display: flex, $direction: row, $wrap: wrap, $gutter: map-get($flexie, gutter), $justify: null, $align: null) {
  @include flexie-display($display);
  @include flexie-direction($direction);
  @include flexie-row-wrap($wrap);
  @include flexie-gutter($gutter, row);

  // Check if row is justified
  @if $justify != null {
    @include flexie-row-justify($justify);
  }

  // Check if row is aligned
  @if $align != null {
    @include flexie-row-align($align);
  }
}

/// Create column element context
///
/// @param {Number} $width ['auto'] - create auto width column
/// @param {Number} $gutter [map-get($flexie, gutter)] - set column gutter width
/// @param {String} $display ['flex'] - set flex display property
/// @param {String} $direction ['column'] - set flex direction property
/// @param {String} $align - set individual column alignment
/// @param {String} $order - set flex-item source order
///
/// @example scss
///   @include flexie-col();
///   @include flexie-col(3/7, 40px);
///   @include flexie-col(3/7, $display: inline-flex, $align: bottom);
@mixin flexie-col($width: auto, $gutter: map-get($flexie, gutter), $display: flex, $direction: column, $align: null, $order: null) {
  @include flexie-col-width($width);
  @include flexie-gutter($gutter, col);
  @include flexie-display($display);
  @include flexie-direction($direction);

  // Check if column is aligned
  @if $align != null {
    @include flexie-col-align($align);
  }

  // Check if column is re-ordered
  @if $order != null {
    @include flexie-col-order($order);
  }
  flex-shrink: 0;
}
