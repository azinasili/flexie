////
/// Flexie grid system
/// @author Azin Asili
/// @group Flexie mixin library
/// @access public
/// @link https://github.com/azinasili/flexie
////

/// Flex display property setter
/// @param {string} $display [flex] - Flex display value
/// @require {function} _flexie-display - Flex display value getter
/// @output Display declaration
/// @example scss
///   .foo {
///     @include flexie-display(inline-flex);
///   }
/// @example css
///   .foo {
///     display: inline-flex;
///   }
@mixin flexie-display($display: flex) {
  display: _flexie-display($display);
}

/// Flex direction property setter
/// @param {string} $direction [row] - Flex direction value
/// @output Flex-direction declaration
/// @example scss
///   .foo {
///     @include flexie-direction(column);
///   }
/// @example css
///   .foo {
///     flex-direction: column;
///   }
@mixin flexie-direction($direction: row) {
  flex-direction: _flexie-direction($direction);
}

/// Row or column gutter width setter
/// @param {string} $row-or-col [col] - Determine gutter width context
/// @param {number} $gutter [map-get($flexie, gutter)] - Gutter width
/// @output Gutter width for row or column depending on context passed
/// @throw Warning and invalid property if $row-or-col is not 'r', 'row', 'c', 'col', or 'column'
/// @example scss
///   .foo {
///     @include flexie-gutter(row, 20px);
///   }
/// @example css
///   .foo {
///     margin-left: -10px;
///     margin-right: -10px;
///   }
@mixin flexie-gutter($row-or-col: col, $gutter: map-get($flexie, gutter)) {
  @if index('c' 'col' 'column', $row-or-col) {
    padding-left: _flexie-gutter($row-or-col, $gutter);
    padding-right: _flexie-gutter($row-or-col, $gutter);

  } @else if index('r' 'row', $row-or-col) {
    margin-left: _flexie-gutter($row-or-col, $gutter);
    margin-right: _flexie-gutter($row-or-col, $gutter);
  } @else {
    @warn '`#{$row-or-col}` is not a valid argument for flexie-gutter(). Please use `r`, `row`, `c`, `col`, or `column` instead.';
    invalid-argument: $row-or-col;
  }
}

/// Flex-wrap property setter
/// @param {string} $wrap [wrap] - Flex wrap value
/// @output Flex-wrap declaration
/// @example scss
///   .foo {
///     @include flexie-wrap(nowrap);
///   }
/// @example css
///   .foo {
///     flex-wrap: nowrap;
///   }
@mixin flexie-wrap($wrap: wrap) {
  flex-wrap: _flexie-wrap($wrap);
}

/// Justify-content property setter
/// @param {string} $justify [flex-start] - Justify-content value
/// @output Justify content for flex children
/// @example scss
///   .foo {
///     @include flexie-justify(center);
///   }
/// @example css
///   .foo {
///     justify-content: center;
///   }
@mixin flexie-justify($justify: flex-start) {
  justify-content: _flexie-justify($justify);
}

/// Flex alignment setter
/// @param {string} $row-or-col [row] - Determine alignment context
/// @param {string} $align [flex-start] - Flex alignment value
/// @output Align-self or align-items declaration depending on context passed
/// @throw Warning and invalid property if $row-or-col is not 'r', 'row', 'c', 'col', or 'column'
/// @example scss
///   .foo {
///     @include flexie-align(col, stretch);
///   }
/// @example css
///   .foo {
///     align-self: stretch;
///   }
@mixin flexie-align($row-or-col: row, $align: flex-start) {
  @if index('c' 'col' 'column', $row-or-col) {
    align-self: _flexie-align($align);
  } @else if index('r' 'row', $row-or-col) {
    align-items: _flexie-align($align);
  } @else {
    @warn '`#{$row-or-col}` is not a valid argument for flexie-align(). Please use `r`, `row`, `c`, `col`, or `column` instead.';
    invalid-argument: $row-or-col;
  }
}

/// Column width setter
/// @param {string | number} $col-width [auto] - Column width
/// @output Flex item width
/// @example scss
///   .foo {
///     @include flexie-col-width(3/5);
///   }
/// @example css
///   .foo {
///     flex-basis: 60%;
///     flex-grow: 0;
///     max-width: 60%;
///   }
@mixin flexie-col-width($col-width: auto) {
  @if $col-width != auto {
    flex-basis: percentage($col-width);
    flex-grow: 0;
    max-width: percentage($col-width);
  } @else {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
    min-width: 0;
  }
}

/// Source order setter
/// @param {string} $order - Source order value
/// @output Order declaration
/// @example scss
///   .foo {
///     @include flexie-order(3);
///   }
/// @example css
///   .foo {
///     order: 3;
///   }
@mixin flexie-order($order) {
  order: _flexie-order($order);
}

/// Create container element
/// @param {number} $width [map-get($flexie, container-width)] - Container element width
/// @param {number} $gutter [map-get($flexie, gutter)] - Container element gutter width
/// @output Width and center container element
/// @example scss
///   .foo {
///     @include flexie-container(1500px, 20px);
///   }
/// @example css
///   .foo {
///     margin-left: auto;
///     margin-right: auto;
///     max-width: 1500px;
///     padding-left: 10px;
///     padding-right: 10px;
///     width: 100%;
///   }
@mixin flexie-container($width: map-get($flexie, container-width), $gutter: map-get($flexie, gutter)) {
  @if $width != 100% {
    margin-left: auto;
    margin-right: auto;
    max-width: $width;
  }
  @include flexie-gutter(col, $gutter);
  width: 100%;
}

/// Create row element
/// @param {string} $display [flex] - Flex display value
/// @param {string} $direction [row] - Flex direction value
/// @param {string} $wrap [wrap] - Flex wrap value
/// @param {number} $gutter [map-get($flexie, gutter)] - Gutter width
/// @param {string} $justify [null] - Justify-content value
/// @param {string} $align [null] - Flex alignment value
/// @output Display, flex-direction, flex-wrap, margin, justify-content, and align-items declarations to create row
/// @example scss
///   .foo {
///     @include flexie-row(flex, row-reverse, nowrap, 20px, center, stretch);
///   }
/// @example css
///   .foo {
///     display: flex;
///     flex-direction: row-reverse;
///     flex-wrap: nowrap;
///     margin-left: -10px;
///     margin-right: -10px;
///     justify-content: center;
///     align-items: stretch;
///   }
@mixin flexie-row($display: flex, $direction: row, $wrap: wrap, $gutter: map-get($flexie, gutter), $justify: null, $align: null) {
  @include flexie-display($display);
  @include flexie-direction($direction);
  @include flexie-wrap($wrap);
  @include flexie-gutter(row, $gutter);
  @if $justify != null {
    @include flexie-justify($justify);
  }
  @if $align != null {
    @include flexie-align(row, $align);
  }
}

/// Create column element
/// @param {number} $width [auto] - Column width
/// @param {number} $gutter [map-get($flexie, gutter)] - Gutter width
/// @param {string} $display [flex] - Flex display value
/// @param {string} $direction [column] - Flex direction value
/// @param {string} $align [null] - Flex alignment value
/// @param {string} $order [null] - Source order value
/// @output Width, padding, display, flex-direction, align-self, order, and flex-shrink declarations to create column
/// @example scss
///   .foo {
///     @include flexie-col(3/5, 20px, flex, row, center, 2);
///   }
/// @example css
///   .foo {
///     flex-basis: 60%;
///     flex-grow: 0;
///     max-width: 60%;
///     padding-left: 10px;
///     padding-right: 10px;
///     display: flex;
///     flex-direction: row;
///     align-self: center;
///     order: 2;
///   }
@mixin flexie-col($width: auto, $gutter: map-get($flexie, gutter), $display: flex, $direction: column, $align: null, $order: null) {
  @include flexie-col-width($width);
  @include flexie-gutter(col, $gutter);
  @include flexie-display($display);
  @include flexie-direction($direction);
  @if $align != null {
    @include flexie-align(col, $align);
  }
  @if $order != null {
    @include flexie-order($order);
  }
  flex-shrink: 0;
}
