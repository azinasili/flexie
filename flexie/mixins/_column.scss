/// Create column element
/// @param {number} $width [auto] - Column width
/// @param {number} $gutter [map-get($flexie, gutter)] - Gutter width
/// @param {string} $display [flex] - Flex display value
/// @param {string} $direction [column] - Flex direction value
/// @param {string} $align [null] - Flex alignment value
/// @param {string} $order [null] - Source order value
/// @require {mixin} flexie-width - Column width setter
/// @require {mixin} flexie-gutter - Row or column gutter width setter
/// @require {mixin} flexie-display - Flex display property setter
/// @require {mixin} flexie-direction - Flex direction property setter
/// @require {mixin} flexie-align - Flex alignment setter
/// @require {mixin} flexie-order - Source order setter
/// @output Width, padding, display, flex-direction, align-self, order, and flex-shrink declarations to create column
/// @example scss
///   .foo {
///     @include flexie-column(3/5, 20px, flex, row, center, 2);
///   }
/// @example css
///   .foo {
///     flex-basis: 60%;
///     flex-grow: 0;
///     max-width: 60%;
///     padding-left: 10px;
///     padding-right: 10px;
///     display: flex;
///     flex-direction: row;
///     align-self: center;
///     order: 2;
///   }
@mixin flexie-column(
  $width: auto,
  $gutter: map-get($flexie, gutter),
  $display: flex,
  $direction: column,
  $align: null,
  $order: null)
{
  @include flexie-width($width);
  @include flexie-gutter(col, $gutter);
  @include flexie-display($display);
  @include flexie-direction($direction);
  @if $align != null {
    @include flexie-align(col, $align);
  }
  @if $order != null {
    @include flexie-order($order);
  }
  flex-shrink: 0;
}

/// Alias to flexie-column()
/// @alias flexie-column()
@mixin flexie-col($args...) {
  @include flexie-column($args...);
}
