////
/// Flexie grid system
/// @author Azin Asili
/// @group Flexie Function Helpers
/// @access private
/// @link https://github.com/azinasili/flexie
////

/// Flex display value getter
/// @param {string} $display - Flex display value
/// @return {value} Display value for flex items
/// @throw Warning if $display is not 'flex' or 'inline-flex'
@function _flexie-display($display) {
  @if not index('flex' 'inline-flex', $display) {
    @warn '`#{$display}` is not a valid argument of flexie-display(). Please use `flex` or `inline-flex` instead.';
  }
  @return $display;
}

/// Flex direction value getter
/// @param {string} $direction - Flex direction value
/// @return {value} Flex direction value
/// @throw Warning if $direction is not 'row', 'row-reverse', 'column', or 'column-reverse'
@function _flexie-direction($direction) {
  @if not index('row' 'row-reverse' 'column' 'column-reverse', $direction) {
    @warn '`#{$direction}` is not a valid argument of flexie-direction(). Please use `row`, `row-reverse`, `column`, or `column-reverse` instead.';
  }
  @return $direction;
}

/// Calculate gutter for row or column
/// @param {string} $row-or-col - Gutter context
/// @param {number} $gutter - Gutter width
/// @return {number} Gutter width for row or column
/// @throw Warning if $gutter is not a number or is unitless
@function _flexie-gutter($row-or-col, $gutter) {
  @if $gutter == 0 {
    @return $gutter;
  } @else if type-of($gutter) != number or unitless($gutter) == true {
    @warn '`#{$gutter}` is not a valid argument of flexie-gutter(). Please use a number with a unit instead';
  }
  @if index('c' 'col' 'column', $row-or-col) {
    @return $gutter/2;
  } @else if index('r' 'row', $row-or-col) {
    @return $gutter/-2;
  }
}

/// Flex wrap getter
/// @param {string} $wrap - Flex wrap value
/// @return {value} Flex wrap value
/// @throw Warning if $wrap is not 'wrap', 'wrap-reverse', 'nowrap'
@function _flexie-wrap($wrap) {
  @if not index('wrap' 'wrap-reverse' 'nowrap', $wrap) {
    @warn '`#{$wrap}` is not a valid argument of flexie-wrap(). Please use `wrap`, `wrap-reverse`, or `nowrap` instead.';
  }
  @return $wrap;
}

/// Flex items horizontal distribution getter
/// @param {string} $justify - Flex items horizontal distribution value
/// @return {value} items horizontal distribution value
/// @throw Warning if $justify is not 'flex-start', 'flex-end', 'center', 'space-around', 'space-between', 'around', 'between', 'left', or 'right'
@function _flexie-justify($justify) {
  $shorthand: (
    around  : space-around,
    between : space-between,
    left    : flex-start,
    right   : flex-end
  );
  @if not index('flex-start' 'flex-end' 'center' 'space-around' 'space-between', $justify) and map-has-key($shorthand, $justify) == false {
    @warn '`#{$justify}` is not a valid argument for flexie-justify(). Please use `flex-start`, `flex-end`, `center`, `space-around`, `space-between`, `around`, `between`, `left`, or `right` instead.';
  } @else if map-has-key($shorthand, $justify) {
    @return map-get($shorthand, $justify);
  }
  @return $justify;
}

/// Flex item alignment getter
/// @param {string} $align - Flex alignment value for row or column
/// @return {value} Flex alignment value
/// @throw Warning if $align is not 'flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'bottom', 'middle', or 'top'
@function _flexie-align($align) {
  $shorthand: (
    bottom : flex-end,
    middle : center,
    top    : flex-start
  );
  @if not index('flex-start' 'flex-end' 'center' 'stretch' 'baseline', $align) and map-has-key($shorthand, $align) == false {
    @warn '`#{$align}` is not a valid argument for flexie-align(). Please use `flex-start`, `flex-end`, `center`, `stretch`, `baseline`, `bottom`, `middle`, or `top` instead.';
  } @else if map-has-key($shorthand, $align) {
    @return map-get($shorthand, $align);
  }
  @return $align;
}

/// Flex item order getter
/// @param {number} $order - Flex item source order value
/// @return {number} Flex item source order value
/// @throw Warning if $order is not a number or is unitless
@function _flexie-order($order) {
  @if type-of($order) != number or unitless($order) != true or round($order) != $order {
    @warn '`#{$order}` is not a valid argument of flexie-order(). Please use a unit-less integer instead.';
  }
  @return $order;
}
