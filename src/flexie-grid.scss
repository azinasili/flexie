// ----------------------------------------------------------------------------
// The Grid
// Structure and layout
//
// 1. Universal grid structure
// 2. Grid overrides
// 3. Grid system
// 4. Breakpoints
// ----------------------------------------------------------------------------

// Import Flexie dependency
@import 'flexie/flexie';

// ----------------------------------------------------------------------------
// 1. Universal grid structure
// ----------------------------------------------------------------------------

// Global container object
.container {
  @include flexie-container();
}

// Column container
.row {
  @include flexie-row();
}

// Column base object
.col {
  @include flexie-col();
}


// ----------------------------------------------------------------------------
// 2. Grid overrides
// ----------------------------------------------------------------------------

// Reverse column order
.row-reverse {
  @include flexie-direction(row-reverse);
  @include flexie-wrap(wrap-reverse);
}

// Horizontal alignment for children columns
.row-start     { @include flexie-justify(flex-start); }
.row-center    { @include flexie-justify(center); }
.row-end       { @include flexie-justify(flex-end); }

// Vertical alignment for children columns
.row-top       { @include flexie-align(row); }
.row-middle    { @include flexie-align(row, center); }
.row-bottom    { @include flexie-align(row, flex-end); }
.row-stretch   { @include flexie-align(row, stretch); }

// Evenly distribute remaining space for children columns
.row-around    { @include flexie-justify(space-around); }
.row-between   { @include flexie-justify(space-between); }

  // Column alignment overrides
.col-top       { @include flexie-align(col); }
.col-middle    { @include flexie-align(col, center); }
.col-bottom    { @include flexie-align(col, flex-end); }
.col-stretch   { @include flexie-align(col, stretch); }

// Re-order columns
@if map-has-key($flexie, columns) {
  @for $i from 1 through map-get($flexie, columns) {
    .order-#{$i} { @include flexie-order($i); }
  }
} @else {
  @for $i from 1 through 10 {
    .order-#{$i} { @include flexie-order($i); }
  }
}


// ----------------------------------------------------------------------------
// 3. Grid system
// ----------------------------------------------------------------------------
.col-auto { @include flexie-width(); }

// Column sizes
@if map-has-key($flexie, columns) {
  @for $i from 1 through map-get($flexie, columns) {
    .col-#{$i}   { @include flexie-width(1/$i); }
  }
} @else {
  @for $i from 1 through 10 {
    .col-#{$i}   { @include flexie-width(1/$i); }
  }
}


// ----------------------------------------------------------------------------
// 4. Breakpoints
// ----------------------------------------------------------------------------

// Medium breakpoint
@media (min-width: 45em) {
  // Reverse column order
  .row-reverse-md {
    @include flexie-direction(row-reverse);
    @include flexie-wrap(wrap-reverse);
  }

  // Horizontal alignment for children columns
  .row-start-md     { @include flexie-justify(flex-start); }
  .row-center-md    { @include flexie-justify(center); }
  .row-end-md       { @include flexie-justify(flex-end); }

  // Vertical alignment for children columns
  .row-top-md       { @include flexie-align(row); }
  .row-middle-md    { @include flexie-align(row, center); }
  .row-bottom-md    { @include flexie-align(row, flex-end); }
  .row-stretch-md   { @include flexie-align(row, stretch); }

  // Evenly distribute remaining space for children columns
  .row-around-md    { @include flexie-justify(space-around); }
  .row-between-md   { @include flexie-justify(space-between); }

  // Column alignment overrides
  .col-top-md       { @include flexie-align(col); }
  .col-middle-md    { @include flexie-align(col, center); }
  .col-bottom-md    { @include flexie-align(col, flex-end); }
  .col-stretch-md   { @include flexie-align(col, stretch); }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-md { @include flexie-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-md { @include flexie-order($i); }
    }
  }

  // Auto size column
  .col-auto-md { @include flexie-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-md   { @include flexie-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-md   { @include flexie-width(1/$i); }
    }
  }
}

// Desktop breakpoint
@media (min-width: 71.25em) {
  // Reverse column order
  .row-reverse-lg {
    @include flexie-direction(row-reverse);
    @include flexie-wrap(wrap-reverse);
  }

  // Horizontal alignment for children columns
  .row-start-lg     { @include flexie-justify(flex-start); }
  .row-center-lg    { @include flexie-justify(center); }
  .row-end-lg       { @include flexie-justify(flex-end); }

  // Vertical alignment for children columns
  .row-top-lg       { @include flexie-align(row); }
  .row-middle-lg    { @include flexie-align(row, center); }
  .row-bottom-lg    { @include flexie-align(row, flex-end); }
  .row-stretch-lg   { @include flexie-align(row, stretch); }

  // Evenly distribute remaining space for children columns
  .row-around-lg    { @include flexie-justify(space-around); }
  .row-between-lg   { @include flexie-justify(space-between); }

  // Column alignment overrides
  .col-top-lg       { @include flexie-align(col); }
  .col-middle-lg    { @include flexie-align(col, center); }
  .col-bottom-lg    { @include flexie-align(col, flex-end); }
  .col-stretch-lg   { @include flexie-align(col, stretch); }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-lg { @include flexie-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-lg { @include flexie-order($i); }
    }
  }

  // Auto size column
  .col-auto-lg { @include flexie-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-lg   { @include flexie-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-lg   { @include flexie-width(1/$i); }
    }
  }
}

// Wide breakpoint
@media (min-width: 90em) {
  // Reverse column order
  .row-reverse-xl {
    @include flexie-direction(row-reverse);
    @include flexie-wrap(wrap-reverse);
  }

  // Horizontal alignment for children columns
  .row-start-xl     { @include flexie-justify(flex-start); }
  .row-center-xl    { @include flexie-justify(center); }
  .row-end-xl       { @include flexie-justify(flex-end); }

  // Vertical alignment for children columns
  .row-top-xl       { @include flexie-align(row); }
  .row-middle-xl    { @include flexie-align(row, center); }
  .row-bottom-xl    { @include flexie-align(row, flex-end); }
  .row-stretch-xl   { @include flexie-align(row, stretch); }

  // Evenly distribute remaining space for children columns
  .row-around-xl    { @include flexie-justify(space-around); }
  .row-between-xl   { @include flexie-justify(space-between); }

  // Column alignment overrides
  .col-top-xl       { @include flexie-align(col); }
  .col-middle-xl    { @include flexie-align(col, center); }
  .col-bottom-xl    { @include flexie-align(col, flex-end); }
  .col-stretch-xl   { @include flexie-align(col, stretch); }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-xl { @include flexie-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-xl { @include flexie-order($i); }
    }
  }

  // Auto size column
  .col-auto-xl { @include flexie-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-xl   { @include flexie-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-xl   { @include flexie-width(1/$i); }
    }
  }
}

