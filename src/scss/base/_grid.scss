// ----------------------------------------------------------------------------
// The Grid
// Structure and layout
//
// Demo
// 1. Universal grid structure
// 2. Grid overrides
// 3. Grid system
// 4. Breakpoints
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// Demo
// ----------------------------------------------------------------------------

// Column styles for demo
.col {
  background: scale-color($color-primary-lightest, $alpha: -80%);
  box-shadow: inset 0 0 0 1px scale-color($color-primary-lightest, $alpha: -80%);
  padding-bottom: 10px;
  padding-top: 10px;
}

// Illustrates grid with content
.box {
  background: $color-primary;
  border-radius: 3px;
  color: $color-white;
  overflow: hidden;
  padding: 5px;
  text-align: center;
  text-transform: capitalize;
  white-space: nowrap;

  // Large variation
  &.box-large {
    padding-bottom: 75px;
  }
}


// ----------------------------------------------------------------------------
// 1. Universal grid structure
// ----------------------------------------------------------------------------

// Global container object
.container {
  @include flexie-container();
}

// Column container
.row {
  @include flexie-row();
}

// Column base object
.col {
  @include flexie-col();
}


// ----------------------------------------------------------------------------
// 2. Grid overrides
// ----------------------------------------------------------------------------

// Reverse column order
.row-reverse   { flex-direction: row-reverse; flex-wrap: row-reverse; }

// Horizontal alignment for children columns
.row-start     { justify-content: flex-start; }
.row-center    { justify-content: center; }
.row-end       { justify-content: flex-end; }

// Vertical alignment for children columns
.row-top       { align-items: flex-start; }
.row-middle    { align-items: center; }
.row-bottom    { align-items: flex-end; }
.row-stretch   { align-items: stretch; }

// Evenly distribute remaining space for children columns
.row-around    { justify-content: space-around; }
.row-between   { justify-content: space-between; }

  // Column alignment overrides
.col-top       { align-self: flex-start; }
.col-middle    { align-self: center; }
.col-bottom    { align-self: flex-end; }
.col-stretch   { align-self: stretch; }

// Re-order columns
@if map-has-key($flexie, columns) {
  @for $i from 1 through map-get($flexie, columns) {
    .order-#{$i} { @include flx-col-order($i); }
  }
} @else {
  @for $i from 1 through 10 {
    .order-#{$i} { @include flx-col-order($i); }
  }
}


// ----------------------------------------------------------------------------
// 3. Grid system
// ----------------------------------------------------------------------------
.col-auto { @include flx-col-width(); }

// Column sizes
@if map-has-key($flexie, columns) {
  @for $i from 1 through map-get($flexie, columns) {
    .col-#{$i}   { @include flx-col-width(1/$i); }
  }
} @else {
  @for $i from 1 through 10 {
    .col-#{$i}   { @include flx-col-width(1/$i); }
  }
}


// ----------------------------------------------------------------------------
// 4. Breakpoints
// ----------------------------------------------------------------------------

// Medium breakpoint
@include mq($from: tablet) {
  // Reverse column order
  .row-reverse-md   { flex-direction: row-reverse; flex-wrap: row-reverse; }

  // Horizontal alignment for children columns
  .row-start-md     { justify-content: flex-start; }
  .row-center-md    { justify-content: center; }
  .row-end-md       { justify-content: flex-end; }

  // Vertical alignment for children columns
  .row-top-md       { align-items: flex-start; }
  .row-middle-md    { align-items: center; }
  .row-bottom-md    { align-items: flex-end; }
  .row-stretch-md   { align-items: stretch; }

  // Evenly distribute remaining space for children columns
  .row-around-md    { justify-content: space-around; }
  .row-between-md   { justify-content: space-between; }

  // Column alignment overrides
  .col-top-md       { align-self: flex-start; }
  .col-middle-md    { align-self: center; }
  .col-bottom-md    { align-self: flex-end; }
  .col-stretch-md   { align-self: stretch; }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-md { @include flx-col-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-md { @include flx-col-order($i); }
    }
  }

  // Auto size column
  .col-auto-md { @include flx-col-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-md   { @include flx-col-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-md   { @include flx-col-width(1/$i); }
    }
  }
}

// Desktop breakpoint
@include mq($from: desktop) {
  // Reverse column order
  .row-reverse-lg   { flex-direction: row-reverse; flex-wrap: row-reverse; }

  // Horizontal alignment for children columns
  .row-start-lg     { justify-content: flex-start; }
  .row-center-lg    { justify-content: center; }
  .row-end-lg       { justify-content: flex-end; }

  // Vertical alignment for children columns
  .row-top-lg       { align-items: flex-start; }
  .row-middle-lg    { align-items: center; }
  .row-bottom-lg    { align-items: flex-end; }
  .row-stretch-lg   { align-items: stretch; }

  // Evenly distribute remaining space for children columns
  .row-around-lg    { justify-content: space-around; }
  .row-between-lg   { justify-content: space-between; }

  // Column alignment overrides
  .col-top-lg       { align-self: flex-start; }
  .col-middle-lg    { align-self: center; }
  .col-bottom-lg    { align-self: flex-end; }
  .col-stretch-lg   { align-self: stretch; }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-lg { @include flx-col-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-lg { @include flx-col-order($i); }
    }
  }

  // Auto size column
  .col-auto-lg { @include flx-col-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-lg   { @include flx-col-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-lg   { @include flx-col-width(1/$i); }
    }
  }
}

// Wide breakpoint
@include mq($from: wide) {
  // Reverse column order
  .row-reverse-xl   { flex-direction: row-reverse; flex-wrap: row-reverse; }

  // Horizontal alignment for children columns
  .row-start-xl     { justify-content: flex-start; }
  .row-center-xl    { justify-content: center; }
  .row-end-xl       { justify-content: flex-end; }

  // Vertical alignment for children columns
  .row-top-xl       { align-items: flex-start; }
  .row-middle-xl    { align-items: center; }
  .row-bottom-xl    { align-items: flex-end; }
  .row-stretch-xl   { align-items: stretch; }

  // Evenly distribute remaining space for children columns
  .row-around-xl    { justify-content: space-around; }
  .row-between-xl   { justify-content: space-between; }

  // Column alignment overrides
  .col-top-xl       { align-self: flex-start; }
  .col-middle-xl    { align-self: center; }
  .col-bottom-xl    { align-self: flex-end; }
  .col-stretch-xl   { align-self: stretch; }

  // Re-order columns
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .order-#{$i}-xl { @include flx-col-order($i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .order-#{$i}-xl { @include flx-col-order($i); }
    }
  }

  // Auto size column
  .col-auto-xl { @include flx-col-width(); }

  // Column sizes
  @if map-has-key($flexie, columns) {
    @for $i from 1 through map-get($flexie, columns) {
      .col-#{$i}-xl   { @include flx-col-width(1/$i); }
    }
  } @else {
    @for $i from 1 through 10 {
      .col-#{$i}-xl   { @include flx-col-width(1/$i); }
    }
  }
}

