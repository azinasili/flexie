// ----------------------------------------------------------------------------
// Helpers
// Inline helper functions
//
// 1. PX to EM conversion
// 2. PX to REM conversion
// 2. Dynamic text color
// 3. Random color generator
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// 1. PX to EM conversion
// ----------------------------------------------------------------------------

// Strip units from values
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Simple function to easily convert px into em
@function convert-to-em($px, $base: $font-base) {
  @if type-of($px) == number {
    $px: strip-unit($px);
    $base: strip-unit($base);
    @if $px == 1 {
      @return 1px;
    } @else if $px == -1 {
      @return -1px;
    } @else if $px == 0 {
      @return 0;
    }
    @return ($px/$base) * 1em;
  } @else if type-of($px) != number {
    @warn '#{$px} is not a number';
    @return null;
  }
}

// Function to iterate over multiple values and convert them em
@function em($values, $base-value: $font-base) {
  $max: length($values);
  $em-values: ();
  @if $max == 1 {
    @return convert-to-em(nth($values, 1), $base-value);
  }
  @for $i from 1 through $max {
    $em-values: append($em-values, convert-to-em(nth($values, $i), $base-value));
  }
  @return $em-values;
}


// ----------------------------------------------------------------------------
// 2. PX to REM conversion
// ----------------------------------------------------------------------------

// Simple function to easily convert px into rem
@function convert-to-rem($px, $base: $font-base) {
  @if type-of($px) == number {
    $px: strip-unit($px);
    $base: strip-unit($base);
    @if $px == 1 {
      @return 1px;
    } @else if $px == -1 {
      @return -1px;
    } @else if $px == 0 {
      @return 0;
    }
    @return ($px/$base) * 1rem;
  } @else if type-of($px) != number {
    @warn '#{$px} is not a number';
    @return null;
  }
}

// Function to iterate over multiple values and convert them rem
@function rem($values, $base-value: $font-base) {
  $max: length($values);
  $rem-values: ();
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $rem-values;
}


// ----------------------------------------------------------------------------
// 2. Dynamic text color
// ----------------------------------------------------------------------------
// Grab brightness of color
@function brightness($color) {
  @return ((red($color)) + (green($color)) + (blue($color))) / 255 * 100%;
}

// Compare bightness and print new text color
@function text-color($color) {
  @if $color == null {
    @return null;
  } @else {
    $color-light: mix(#fff, $color, 80%);
    $color-dark: mix(#000, $color, 60%);
    $color-brightness: brightness($color);
    $light-text-brightness: brightness($color-light);
    $dark-text-brightness: brightness($color-dark);

    @if abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness) {
      @return $color-light;
    }
    @else {
      @return $color-dark;
    }
  }
}


// ----------------------------------------------------------------------------
// 3. Random color generator
// ----------------------------------------------------------------------------

// List named colors
$named-colors: AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGrey, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, Darkorange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkSlateGrey, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DimGrey, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Grey, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGrey, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSlateGrey, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, SlateGrey, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen;

// Generate a random color
@function make-random-color() {
  $color: (
    octal: (
      red: random(256)-1,
      green: random(256)-1,
      blue: random(256)-1
    ),
    percent: (
      red: random(101)-1,
      green: random(101)-1,
      blue: random(101)-1,
      saturation: random(101)-1,
      light: random(101)-1
    ),
    deg: (
      hue: random(361)-1
    ),
    fraction: (
      alpha: random(100)/100
    )
  );

  @return $color;
}

// Get named color
@function color($base, $component) {
  $color: make-random-color();
  @return map-get(map-get($color, $base), $component);
}

// Output color
@function random-color($format: null) {
  @if $format == 'hex' {
    @return rgb(color(octal, red), color(octal, green), color(octal, blue));
  }
  @else if $format == 'rgb' {
    @return unquote('rgb(#{color(octal, red)}, #{color(octal, green)}, #{color(octal, blue)})');
  }
  @else if $format == '%rgb' {
    @return unquote('rgb(#{color(percent, red)}%, #{color(percent, green)}%, #{color(percent, blue)}%)');
  }
  @else if $format == 'rgba' {
    @return unquote('rgba(#{color(octal, red)}, #{color(octal, green)}, #{color(octal, blue)}, #{color(fraction, alpha)})');
  }
  @else if $format == '%rgba' {
    @return unquote('rgba(#{color(percent, red)}%, #{color(percent, green)}%, #{color(percent, blue)}%, #{color(fraction, alpha)})');
  }
  @else if $format == 'hsl' {
    @return unquote('hsl(#{color(deg, hue)}, #{color(percent, saturation)}%, #{color(percent, light)}%)');
  }
  @else if $format == 'hsla' {
    @return unquote('hsla(#{color(deg, hue)}, #{color(percent, saturation)}%, #{color(percent, light)}%, #{color(fraction, alpha)})');
  }
  @else {
    @return nth($named-colors, random(147));
  }
}
